function [Rk,Rx,coef] = myGRAPPA(Size,Sk,Slines,acs,coef)

%myGRAPPA
% 
%      [Rk,Rx,coef] = myGRAPPA(Size,Sk,Slines,acs,coef)
%
% INPUTS:
%	Size: [Mx,My,coils] Original size of 2D slice
%       Sk: subsampled k-space (cero padded)
%       Slines:  Position of sampled lines
%       ACS: acs lines
%       coefs: GRAPPA coefficientes (if not provided, estimated)
%
% OUTPUT
%	Rk: Reconstructed k-space
%	Rx: reconstructed (complex) x-space
%	coef: GRAPPA reconstruction coefficients
%	
% GRAPPA reconsrtuction of subsampled k_space
%
%
% Implementation of  
% 
%     M. A. Griswold, P. M. Jakob, et. al..
%     Generalized autocalibrating partially parallel acquisitions
%     Mag. Reson. Med.   47(6):1202-1210.  Jun 2002
%
% uses 3x2 kernel 
% REQUIRES bicg.m (from sparfun)
%
% EXAMPLE
%       [k_rG2,Ix_G,G_coefs]=myGRAPPA([Mx My coils],k_sG,Samp,ACS,0);
%
% Based on "recongrappa.m" by Scott Hoge  (shoge at ieee dot org)
%
% PARALLEL MRI TOOLBOX
%
% Santiago Aja-Fernandez, LPI
% www.lpi.tel.uva.es/~santi
% Valladolid 23/06/2011
%

kernelX=[-1 0 1];

if length(Size) == 3, 
  Mx=Size(1);
  My=Size(2);
  Ncoils=Size(3);
else,
  error('Size must be [Mx My coils]');
end;

%IF acs adjustent needed----
%if rem(rate,2)
%acs=acs(1:end-1);
%else
%acs=acs(2:end-1);
%end
%----------------------------


ImK = zeros( size(Sk,1), 1 );         
ImK(Slines) = 1;  %Sampled lines set to 1


%ESTIMATE GRAPPA COEFFS---------------------------------
if coef==0
QA = zeros(length(acs)*My, 6*Ncoils); %asumming 3x2 kernel
coef = zeros(6*Ncoils,Ncoils);
for ii = 1:length(acs),
   ind1 = acs(ii) + [-1 1];

   %% determine the k-space filling coefficients 
   for jj=1:length(kernelX),
      y0 = mod( kernelX(jj) + [1:My],My);
      y0( y0 == 0 ) = My;
      QA( My*(ii-1) + (1:My), jj:length(kernelX):size(QA,2) ) = ...
            reshape( permute(squeeze( Sk(ind1,y0,:) ),[ 2 3 1 ]),My, Ncoils*length(ind1) );
      end;
end;
    
AA = QA'*QA;

%Better with GNU cgsolv(), Copyright 2001 William Scott Hoge (shoge@ece.neu.edu or shoge@ieee.org) 
% taken from p.529 of Golub and Van Loan, "Matrix Computations," 3rd ed.
% S. 10.2 The Conjugate Gradient Method
% S. 10.2.6 Some Practical Details.
%
  %n(:,l) = cgsolv( AA, A'*b, zeros(size(A,2),1), size(A,2) );  
%
%SUBSTITUTION bicg


for l=1:Ncoils
  b = vec( squeeze(Sk( acs, :, l )).' );
 [coef(:,l) TT]=bicg(AA,QA'*b);
 %TT Dummy variable to avoid warnings
end
end %If COEF==0
%END ESTIMATION --------------------------------------------


%RECONSTRUCTION---------------------------------------------------

for ii=1:length(ImK),  %For each line

%1.- CONTROL OF INDEX
  if find(Slines==ii), continue, end

  %ELSE: if lines no sampled--> Recons 
  tempo = [];
  ind1 = ii + [-1 1];
  if ( ind1(1) < 1) | (ind1(end) > Mx);    
       klll=1;%do nothing
  else
        tempo = (ImK(ind1)==ones(length(ind1),1));
  end
  if ((min(ind1)<1)|(max(ind1)>Mx)|(sum(tempo)~=length(ind1)))
      continue; 
  end;  
   
%2.- RECONSTRUCT K SPACE

  MA = zeros(My,3*2*Ncoils);
  for jj=1:3
     D1 = mod( kernelX(jj) + [1:My] , My );
     D1(D1==0) = My;   
     MA((1:My),jj:3:3*2*Ncoils)=reshape(permute(squeeze(Sk(ind1,D1,:)),[ 2 3 1 ]),My, Ncoils*length(ind1));
  end %jj
   
  for l=1:Ncoils,   
     Sk(ii,:,l)=MA*coef(:,l); %RECONST
  end

end  %ii
%END RECONSTR----------------------------------------------------------------------


Rk = Sk;
Rx=(k2x(Rk,1));






